/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package panels;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Asus
 */
public class HospitalPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalPanel
     */
    public HospitalPanel() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel)order_table.getModel();
        model.setRowCount(0);  
        showOrder();
    }

    public ArrayList<HospitalOrderPanel> BloodList(){
        ArrayList<HospitalOrderPanel> bloodList = new ArrayList<>();
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager
            .getConnection(
            "jdbc:sqlserver://localhost:1433;databaseName=BloodBank;selectMethod=cursor", "sa", "123456");


            String sql = "Select * from HospitalOrder";  
            Statement statement = connection.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            HospitalOrderPanel bloods;
            while(rs.next()){
                bloods = new HospitalOrderPanel(rs.getInt("Hospital_ID"),rs.getInt("Order_number"),rs.getString("Order_group"),rs.getInt("Order_quantity")); 
                bloodList.add(bloods);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return bloodList;
    }
    
    public void showOrder(){
        ArrayList<HospitalOrderPanel> list = BloodList();
        DefaultTableModel model = (DefaultTableModel)order_table.getModel();
        Object[] row = new Object[6];
        for(int i = 0; i < list.size(); i++){
            row[0] = list.get(i).getHospital_ID();
            row[1] = list.get(i).getOrder_number();
            row[2] = list.get(i).getOrder_group();
            row[3] = list.get(i).getOrder_quantity();
            model.addRow(row); 
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        order_table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        order_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Hospital ID", "Order Number", "Group", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(order_table);

        jButton1.setText("Accepted");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(0, 62, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int opt = JOptionPane.showConfirmDialog(null, "Are you sure you want to accept?", "Accept", JOptionPane.YES_NO_OPTION);
        if(opt == 0){
            int a = order_table.getSelectedRow();
            int ara[]=new int[1000];
            TableModel model = order_table.getModel();
            String donorId = model.getValueAt(a, 1).toString();
            String g = model.getValueAt(a, 2).toString();
            int Quantity = Integer.decode(model.getValueAt(a, 3).toString());
            int counter = 0;
            try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            Connection connection = DriverManager
            .getConnection(
            "jdbc:sqlserver://localhost:1433;databaseName=BloodBank;selectMethod=cursor", "sa", "123456");

            String sql, s, age;
            Statement statement;
            ResultSet rs;
            HomeInformation blood;
            
            
            sql = "select * from BLOOD where Grp like '"+g+"'";
          
            PreparedStatement pst = connection.prepareStatement(sql);
            rs = pst.executeQuery();
            while(rs.next()){
                //Integer Donor_ID = Integer.valueOf(Donor_Id);
                String B = rs.getString("Bag_Number");
                Integer BAG = Integer.valueOf(B);
                ara[counter] = BAG;
                counter++;
            }
                for(int i = 0; i < counter; i++){
                    System.out.println(ara[i]);
                }
        } catch (Exception e) {
            e.printStackTrace();
        }
            if(counter >= Quantity){
            
                
                try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager
                .getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=BloodBank;selectMethod=cursor", "sa", "123456");

                int i = order_table.getSelectedRow();
                model = order_table.getModel();
                //donorId = model.getValueAt(i, 1).toString();
                

                for(int j = 0; j < Quantity; j++){
                String sql = "Delete From BLOOD where Grp like '"+g+"' and Bag_Number like "+ara[j]; 
                PreparedStatement pst = connection.prepareStatement(sql);
                pst.executeUpdate();
                }
  
                //JOptionPane.showMessageDialog(null, "Deleted Successfully!");

            } catch (Exception e) {
                
                e.printStackTrace();
            }
           
            //here
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection connection = DriverManager
                .getConnection(
                "jdbc:sqlserver://localhost:1433;databaseName=BloodBank;selectMethod=cursor", "sa", "123456");

                int i = order_table.getSelectedRow();
                model = order_table.getModel();
                donorId = model.getValueAt(i, 1).toString();

                String sql = "Delete From HospitalOrder where Order_number="+donorId; 
                PreparedStatement pst = connection.prepareStatement(sql);
                pst.executeUpdate();
                DefaultTableModel Model = (DefaultTableModel)order_table.getModel();
                Model.setRowCount(0);  
                showOrder();
                JOptionPane.showMessageDialog(null, "Accepted Successfully!");

            } catch (Exception e) {
                
                e.printStackTrace();
            }
        }
            else{
                JOptionPane.showMessageDialog(null, "Out of Stock!");
            }
        }
            
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable order_table;
    // End of variables declaration//GEN-END:variables
}
